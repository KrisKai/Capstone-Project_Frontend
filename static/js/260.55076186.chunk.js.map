{"version":3,"file":"static/js/260.55076186.chunk.js","mappings":"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","sources":["pages/map/admin/Map.jsx","pages/admin/tripManagement/route/tripRouteCreateUpdate.jsx","../node_modules/@mui/icons-material/Add.js"],"sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  ButtonGroup,\r\n  Typography,\r\n  Card,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport {\r\n  useJsApiLoader,\r\n  GoogleMap,\r\n  Marker,\r\n  Autocomplete,\r\n  DirectionsRenderer,\r\n} from \"@react-google-maps/api\";\r\nimport { GOOGLE_MAP_API } from \"config\";\r\nimport \"./map.css\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport { tripRouteApi } from \"api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst center = { lat: 16.0545, lng: 108.0717 };\r\n\r\nfunction CardCustom() {\r\n  return (\r\n    <>\r\n      <Card sx={{ padding: \"15px 10px\" }}>\r\n        <Box textAlign=\"center\" paddingBottom=\"10px\">\r\n          <Typography>Địa điểm: asd</Typography>\r\n        </Box>\r\n        <Box border=\"1px solid black\" borderRadius=\"2px\">\r\n          <input className=\"custom-input\" />\r\n        </Box>\r\n        <Box display=\"flex\" mt=\"5px\">\r\n          <Button sx={{ width: \"50%\" }}>Delete</Button>\r\n          <Button sx={{ width: \"50%\" }}>Move up</Button>\r\n        </Box>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function Map({ getReturnData }) {\r\n\r\n\r\n  const [map, setMap] = useState(/** @type google.maps.Map */ (null));\r\n  const [directionsResponse, setDirectionsResponse] = useState(null);\r\n  const [distance, setDistance] = useState(\"\");\r\n  const [duration, setDuration] = useState(\"\");\r\n  const [route, setRoute] = useState([\r\n    {\r\n      tripId: 0,\r\n      longitude: \"\",\r\n      latitude: \"\",\r\n      locationName: \"\",\r\n      priority: 0,\r\n    },\r\n  ]);\r\n\r\n  const handleChange = (e, index) => {\r\n    const { name, value } = e.target;\r\n    setRoute((prevRoute) => {\r\n      const updatedRoute = [...prevRoute];\r\n      updatedRoute[index] = {\r\n        ...updatedRoute[index],\r\n        [name]: value,\r\n      };\r\n      return updatedRoute;\r\n    });\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    setRoute([\r\n      ...route,\r\n      {\r\n        tripId: 0,\r\n        longitude: \"\",\r\n        latitude: \"\",\r\n        locationName: \"\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleRemove = async (tripId, index) => {\r\n    if (tripId !== 0) {\r\n      const reponse = await tripRouteApi.delete(tripId || \"\");\r\n      if (reponse > 0) {\r\n        toast.success(\"Xoá thành công!\");\r\n      }\r\n    }\r\n    const list = [...route];\r\n    if (list.length > 1) {\r\n      list.splice(index, 1);\r\n      setRoute(list);\r\n    }\r\n  };\r\n  console.log(route);\r\n\r\n  const handleMoveUp = (index) => {\r\n    console.log(1);\r\n    if (index > 0) {\r\n    const updatedRoute = [...route];\r\n    const tmp = updatedRoute[index];\r\n    updatedRoute[index] = updatedRoute[index - 1];\r\n    updatedRoute[index - 1] = tmp;\r\n    setRoute(updatedRoute);\r\n  }\r\n  };\r\n\r\n  // async function calculateRoute() {\r\n  //   if (\r\n  //     locationRef1.current.value === \"\" ||\r\n  //     locationRef2.current.value === \"\"\r\n  //   ) {\r\n  //     return;\r\n  //   }\r\n  //   // eslint-disable-next-line no-undef\r\n  //   const directionsService = new google.maps.DirectionsService();\r\n  //   const results = await directionsService.route({\r\n  //     origin: locationRef1.current.value,\r\n  //     destination: locationRef2.current.value,\r\n  //     // eslint-disable-next-line no-undef\r\n  //     travelMode: google.maps.TravelMode.DRIVING,\r\n  //   });\r\n  //   setDirectionsResponse(results);\r\n  //   setDistance(results.routes[0].legs[0].distance.text);\r\n  //   setDuration(results.routes[0].legs[0].duration.text);\r\n\r\n  //   ///đây là chỗ đưa dữ liệu ra ngoài component cha\r\n  //   const returnData = {\r\n  //     origin: locationRef1.current.value,\r\n  //     originLat: results.routes[0].legs[0].start_location.lat(),\r\n  //     originLng: results.routes[0].legs[0].start_location.lng(),\r\n  //     destination: locationRef2.current.value,\r\n  //     destinationLat: results.routes[0].legs[0].end_location.lat(),\r\n  //     destinationLng: results.routes[0].legs[0].end_location.lng(),\r\n  //     distance: results.routes[0].legs[0].distance.text,\r\n  //     duration: results.routes[0].legs[0].duration.text,\r\n  //   };\r\n  //   getReturnData(returnData);\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      {/* Google Map Box */}\r\n      <Box height=\"100vh\" width=\"100%\" display=\"flex\">\r\n        <Box width=\"25%\" padding=\"10px 10px\">\r\n          <Box textAlign=\"center\">\r\n            <Typography variant=\"h2\">Setting Route</Typography>\r\n          </Box>\r\n          <Box display=\"flex\" flexDirection=\"column\" gap=\"10px\">\r\n            <Box\r\n              paddingTop=\"10px\"\r\n              display=\"flex\"\r\n              flexDirection=\"column\"\r\n              gap=\"10px\"\r\n            >\r\n              {/* {Array(numberOfPlaces)\r\n                .fill()\r\n                .map((_, idx) => {\r\n                  return <CardCustom></CardCustom>;\r\n                })} */}\r\n              {route.map((route, index) => {\r\n                return (\r\n                  <Card key={index} sx={{ padding: \"15px 10px\" }}>\r\n                    <Box borderRadius=\"2px\">\r\n                      <TextField\r\n                        id=\"locationName\"\r\n                        name=\"locationName\"\r\n                        value={route.locationName}\r\n                        onChange={(e) => handleChange(e, index)}\r\n                      />\r\n                    </Box>\r\n                    <Box display=\"flex\" mt=\"5px\">\r\n                      <Button\r\n                        sx={{ width: \"50%\" }}\r\n                        onClick={() => handleRemove(route.tripId, index)}\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                      <Button\r\n                        sx={{ width: \"50%\" }}\r\n                        onClick={() => handleMoveUp(index)}\r\n                      >\r\n                        Move up\r\n                      </Button>\r\n                    </Box>\r\n                  </Card>\r\n                );\r\n              })}\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                gap: \"10px\",\r\n                \"& button\": {\r\n                  width: \"100%\",\r\n                },\r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleAdd}\r\n              >\r\n                Add new place\r\n              </Button>\r\n              <Button variant=\"contained\">Save</Button>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <Box height=\"100%\" flex=\"1 1 0\">\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\n{\r\n  /* <Box display=\"flex\" justifyContent=\"space-between\" width=\"100%\">\r\n          <Box>\r\n            <Autocomplete>\r\n              <input type=\"text\" ref={locationRef1} />\r\n            </Autocomplete>\r\n          </Box>\r\n          <Box>\r\n            <Autocomplete>\r\n              <input type=\"text\" ref={locationRef2} />\r\n            </Autocomplete>\r\n          </Box>\r\n\r\n          <ButtonGroup>\r\n            <Button colorScheme=\"pink\" type=\"submit\" onClick={calculateRoute}>\r\n              Calculate Route\r\n            </Button>\r\n\r\n          </ButtonGroup>\r\n\r\n          <Typography>Distance: {distance} </Typography>\r\n          <Typography>Duration: {duration} </Typography>\r\n          <Button\r\n            aria-label=\"center back\"\r\n            onClick={() => {\r\n              map.panTo(center);\r\n              map.setZoom(15);\r\n            }}\r\n          >\r\n            Center\r\n          </Button>\r\n        </Box> */\r\n}\r\n","import { Button, Card, Container, FormHelperText } from \"@mui/material\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Select from \"@mui/material/Select\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { tripRouteApi, tripApi } from \"api\";\r\nimport dayjs from \"dayjs\";\r\nimport utc from \"dayjs/plugin/utc\";\r\nimport { Formik } from \"formik\";\r\nimport Map from \"pages/map/admin/Map\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as yup from \"yup\";\r\n\r\ndayjs.extend(utc);\r\n\r\nexport default function RouteCreate() {\r\n  let navigate = useNavigate();\r\n  const { tripId, routeId } = useParams();\r\n  const isEdit = Boolean(routeId);\r\n  const [route, setRoute] = useState({\r\n    tripId: \"\",\r\n    routeDescription: null,\r\n  });\r\n  const [trip, setTrip] = useState({\r\n    tripId: \"\",\r\n    tripName: \"\",\r\n  });\r\n  useEffect(() => {\r\n    // IFFE\r\n    (async () => {\r\n      const response = await tripApi.getAll({\r\n        pageIndex: 0,\r\n        pageSize: 99999999,\r\n        tripName: \"\",\r\n      });\r\n      setTrip(response.listOfTrip);\r\n      if (!tripId || !routeId) return;\r\n      try {\r\n        const data = await tripRouteApi.getById(routeId);\r\n        if (data != null && data != \"\") {\r\n          setRoute(data);\r\n        } else {\r\n          navigate(`/admin/tripRouteList/${tripId}`);\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Failed to fetch trip route\", error);\r\n        if (error.response.status == 401) {\r\n          localStorage.removeItem(\"access_token\");\r\n          navigate(\"/auth/login\");\r\n        }\r\n      }\r\n    })();\r\n  }, [tripId]);\r\n\r\n  function gotoList() {\r\n    navigate(`/admin/tripRouteList/${tripId}`);\r\n  }\r\n\r\n  const validationSchema = yup.object().shape({\r\n    routeDescription: yup\r\n      .string(\"Enter Route Description\")\r\n      .required(\"Route Description is required\"),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h4\" gutterBottom color=\"primary\">\r\n        {isEdit ? \"Update Trip Route\" : \"Create Trip Route\"}\r\n      </Typography>\r\n      <Formik\r\n        initialValues={route}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={async (values, { setErrors, setStatus }) => {\r\n          try {\r\n            setStatus({ success: false });\r\n            let reponse;\r\n            if (isEdit) {\r\n              reponse = await tripRouteApi.update(values);\r\n            } else {\r\n              reponse = await tripRouteApi.create(values);\r\n            }\r\n\r\n            switch (reponse.Code) {\r\n              case \"G001\":\r\n                return toast.error(reponse.Message);\r\n              case \"U001\":\r\n                return toast.error(reponse.Message);\r\n              case \"I001\":\r\n                return toast.error(reponse.Message);\r\n              default: {\r\n                if (reponse > 0) {\r\n                  navigate(`/admin/tripRouteList/${tripId}`);\r\n                  if (isEdit) {\r\n                    toast.success(\"Update Trip Route Successed!\");\r\n                  } else {\r\n                    toast.success(\"Create Trip Route Successed!\");\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } catch (err) {\r\n            setStatus({ success: false });\r\n            setErrors({ submit: err.message });\r\n          }\r\n        }}\r\n      >\r\n        {({\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleSubmit,\r\n          values,\r\n          setFieldValue,\r\n        }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Card>\r\n              {/* <Grid container spacing={3}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      id=\"tripId\"\r\n                      name=\"tripId\"\r\n                      label=\"Trip Name\"\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      value={tripId}\r\n                      onChange={handleChange}\r\n                      error={Boolean(touched.tripId && errors.tripId)}\r\n                    />\r\n                    {touched.tripId && errors.tripId && (\r\n                      <FormHelperText\r\n                        error\r\n                        id=\"standard-weight-helper-text-TripId\"\r\n                      >\r\n                        {errors.tripId}\r\n                      </FormHelperText>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      id=\"routeDescription\"\r\n                      name=\"routeDescription\"\r\n                      label=\"Route Description\"\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      value={values.routeDescription}\r\n                      onChange={handleChange}\r\n                      error={Boolean(\r\n                        touched.routeDescription && errors.routeDescription\r\n                      )}\r\n                    />\r\n                    {touched.routeDescription && errors.routeDescription && (\r\n                      <FormHelperText\r\n                        error\r\n                        id=\"standard-weight-helper-text-RouteDescription\"\r\n                      >\r\n                        {errors.routeDescription}\r\n                      </FormHelperText>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <Button variant=\"outlined\" onClick={gotoList}>\r\n                      Return to List\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} textAlign=\"right\">\r\n                    <Button type=\"submit\" variant=\"contained\">\r\n                      {isEdit ? \"Update\" : \"Create\"}\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid> */}\r\n              <Map></Map>\r\n            </Card>\r\n            <Button variant=\"outlined\" onClick={gotoList}>\r\n              Return to List\r\n            </Button>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;"],"names":["Map","_ref","getReturnData","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","tripId","longitude","latitude","locationName","priority","_useState10","route","setRoute","handleRemove","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","index","list","wrap","_context","prev","next","tripRouteApi","sent","toast","_toConsumableArray","length","splice","stop","_x","_x2","apply","arguments","console","log","handleMoveUp","updatedRoute","tmp","_jsx","_Fragment","children","_jsxs","Box","height","width","display","padding","textAlign","Typography","variant","flexDirection","gap","paddingTop","map","Card","sx","borderRadius","TextField","id","name","value","onChange","e","_e$target","target","prevRoute","_objectSpread","_defineProperty","handleChange","mt","Button","onClick","startIcon","AddIcon","concat","flex","RouteCreate","navigate","useNavigate","_useParams","useParams","routeId","isEdit","Boolean","routeDescription","tripName","setTrip","gotoList","useEffect","response","data","tripApi","pageIndex","pageSize","listOfTrip","abrupt","t0","status","localStorage","removeItem","validationSchema","yup","shape","required","gutterBottom","color","Formik","initialValues","enableReinitialize","onSubmit","_ref3","_callee2","values","setErrors","setStatus","reponse","_context2","success","Code","Message","t1","submit","message","_ref4","errors","touched","handleSubmit","setFieldValue","dayjs","utc","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}