{"version":3,"file":"static/js/829.933ad52d.chunk.js","mappings":"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","sources":["pages/admin/tripManagement/tripList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Box, Button, TextField } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TablePagination from \"@mui/material/TablePagination\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\nimport { tripApi } from \"api\";\r\nimport {\r\n  tripActions,\r\n  getTripList,\r\n  selectAllTripList,\r\n  selectTripFilter,\r\n} from \"../../../redux/modules/trip/tripSlice\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from 'react-toastify';\r\n\r\n// assets\r\n\r\nconst columns = [\r\n  { id: \"fldTripName\", label: \"Trip Name\", minWidth: 100 },\r\n  {\r\n    id: \"fldTripBudget\",\r\n    label: \"Trip Budget\",\r\n    minWidth: 100,\r\n    align: \"center\",\r\n    format: (value) => value.toLocaleString(\"en-US\"),\r\n  },\r\n  {\r\n    id: \"fldTripDescription\",\r\n    label: \"Trip Description\",\r\n    minWidth: 170,\r\n    align: \"center\",\r\n  },\r\n  {\r\n    id: \"fldEstimateStartTime\",\r\n    label: \"Estimate Start Time\",\r\n    minWidth: 130,\r\n    align: \"center\",\r\n  },\r\n  {\r\n    id: \"fldEstimateArrivalTime\",\r\n    label: \"Estimate Arrival Time\",\r\n    minWidth: 130,\r\n    align: \"center\",\r\n  },\r\n  {\r\n    id: \"fldTripStatus\",\r\n    label: \"Trip Status\",\r\n    minWidth: 170,\r\n    align: \"center\",\r\n    format: (value) => value.toLocaleString(\"en-US\"),\r\n  },\r\n  {\r\n    id: \"fldTripMember\",\r\n    label: \"Trip Member\",\r\n    minWidth: 170,\r\n    align: \"center\",\r\n    format: (value) => value.toFixed(2),\r\n  },\r\n];\r\n\r\nexport default function StickyHeadTableTrip() {\r\n  let navigate = useNavigate();\r\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n  const dispatch = useAppDispatch();\r\n  const allTrips = useAppSelector(selectAllTripList);\r\n  const filter = useAppSelector(selectTripFilter);\r\n  const tripList = allTrips.listOfTrip;\r\n  const numberOfTrip = allTrips.numOfTrip;\r\n\r\n  const handleSearch = (event) => {\r\n    setSearchTerm(event.target.value);\r\n    // call api\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    dispatch(\r\n      tripActions.setFilter({\r\n        ...filter,\r\n        pageIndex: newPage,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    dispatch(\r\n      tripActions.setFilter({\r\n        ...filter,\r\n        pageIndex: 0,\r\n        pageSize: +event.target.value,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleUpdate = (id) => {\r\n    // update\r\n    navigate(`/admin/tripUpdate/${id}`);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      console.log(id)\r\n      // Remove trip API\r\n      await tripApi.delete(id || \"\");\r\n\r\n      toast.success('Remove trip successfully!');\r\n\r\n      // Trigger to re-fetch student list with current filter\r\n      const newFilter = { ...filter };\r\n      dispatch(tripActions.setFilter(newFilter));\r\n    } catch (error) {\r\n      // Toast error\r\n      console.log(\"Failed to fetch trip\", error);\r\n    }\r\n  };\r\n\r\n  function gotoCreate() {\r\n    navigate(\"/admin/tripCreate\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    //filter = { pageIndex: 0, pageSize: 10 };\r\n    console.log(filter);\r\n    dispatch(getTripList(filter));\r\n  }, [dispatch, filter]);\r\n\r\n  return (\r\n    <>\r\n      <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\r\n        <Box sx={{ mt: 1, mb: 1 }} textAlign=\"right\">\r\n          <TextField\r\n            id=\"search\"\r\n            type=\"search\"\r\n            label=\"Search\"\r\n            value={searchTerm}\r\n            onChange={handleChange}\r\n            sx={{ width: 400 }}\r\n          />\r\n          <Button variant=\"outlined\" onClick={handleSearch} sx={{ height: 42 }}>\r\n            Search\r\n          </Button>\r\n        </Box>\r\n\r\n        <TableContainer>\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                {columns.map((column) => (\r\n                  <TableCell\r\n                    key={column.id}\r\n                    align={column.align}\r\n                    style={{ minWidth: column.minWidth }}\r\n                  >\r\n                    {column.label}\r\n                  </TableCell>\r\n                ))}\r\n                <TableCell key=\"edit\" align=\"center\">\r\n                  Edit || Delete\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {tripList.map((row) => {\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    tabIndex={row.fldTripId}\r\n                    key={row.fldTripId}\r\n                  >\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                          {column.format && typeof value === \"number\"\r\n                            ? column.format(value)\r\n                            : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                    <TableCell key=\"edit\" align=\"center\">\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        value={row.fldTripId}\r\n                        onClick={(e) => handleUpdate(e.target.value)}\r\n                        color=\"primary\"\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        value={row.fldTripId}\r\n                        onClick={(e) => handleDelete(e.target.value)}\r\n                        color=\"secondary\"\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[10, 25, 100]}\r\n          component=\"div\"\r\n          count={numberOfTrip}\r\n          rowsPerPage={filter.pageSize}\r\n          page={filter.pageIndex}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Box sx={{ mt: 2 }} textAlign=\"right\">\r\n        <Button variant=\"outlined\" onClick={gotoCreate} right>\r\n          Create\r\n        </Button>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n"],"names":["columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","StickyHeadTableTrip","navigate","useNavigate","_React$useState","React","_React$useState2","_slicedToArray","searchTerm","setSearchTerm","dispatch","useAppDispatch","allTrips","useAppSelector","selectAllTripList","filter","selectTripFilter","tripList","listOfTrip","numberOfTrip","numOfTrip","handleDelete","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newFilter","wrap","_context","prev","next","console","log","tripApi","toast","_objectSpread","tripActions","t0","stop","_x","apply","arguments","useEffect","getTripList","_jsxs","_Fragment","children","Paper","sx","width","overflow","Box","mt","mb","textAlign","_jsx","TextField","type","onChange","event","target","Button","variant","onClick","height","TableContainer","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","style","TableBody","row","hover","role","tabIndex","fldTripId","e","concat","color","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","pageSize","page","pageIndex","onPageChange","newPage","onRowsPerPageChange","right"],"sourceRoot":""}