{"version":3,"file":"static/js/313.4d444bdc.chunk.js","mappings":"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","sources":["pages/admin/itemManagement/categoryCreateUpdate.jsx"],"sourcesContent":["import { Button, Card, Container, FormHelperText } from \"@mui/material\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { itemCategoryApi, userApi } from \"api\";\r\nimport { Formik } from \"formik\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as yup from \"yup\";\r\n\r\nexport default function CategoryCreate() {\r\n  let navigate = useNavigate();\r\n  const { categoryId } = useParams();\r\n  const isEdit = Boolean(categoryId);\r\n  const [category, setCategory] = useState({\r\n    categoryName: \"\",\r\n    categoryDescription: \"\",\r\n  });\r\n  const [user, setUser] = useState([\r\n    {\r\n      userId: \"\",\r\n      email: \"\",\r\n      fullname: \"\",\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // IFFE\r\n    (async () => {\r\n      const response = await userApi.getAll({\r\n        pageIndex: 0,\r\n        pageSize: 99999999,\r\n        userName: \"\",\r\n      });\r\n      setUser(response.listOfUser);\r\n      if (!categoryId) return;\r\n      try {\r\n        const data = await itemCategoryApi.getById(categoryId);\r\n        if (data != null && data != \"\") {\r\n          setCategory(data);\r\n        } else {\r\n          navigate(\"/admin/itemCategoryList\");\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Failed to fetch category\", error);\r\n        if (error.response.status == 401) {\r\n          localStorage.removeItem(\"access_token\");\r\n          navigate(\"/auth/login\");\r\n        }\r\n      }\r\n    })();\r\n  }, [categoryId]);\r\n\r\n  function gotoList() {\r\n    navigate(\"/admin/itemCategoryList\");\r\n  }\r\n\r\n  const validationSchema = yup.object().shape({\r\n    categoryName: yup\r\n      .string(\"Enter Category Name\")\r\n      .required(\"Category Name is required\"),\r\n    categoryDescription: yup\r\n      .string(\"Enter Category Description\")\r\n      .required(\"Category Description is required\"),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h4\" gutterBottom color=\"primary\">\r\n        {isEdit ? \"Update Category\" : \"Create Category\"}\r\n      </Typography>\r\n      <Container>\r\n        <Formik\r\n          initialValues={category}\r\n          enableReinitialize={true}\r\n          validationSchema={validationSchema}\r\n          onSubmit={async (values, { setErrors, setStatus }) => {\r\n            try {\r\n              setStatus({ success: false });\r\n              let reponse;\r\n              if (isEdit) {\r\n                reponse = await itemCategoryApi.update(values);\r\n              } else {\r\n                reponse = await itemCategoryApi.create(values);\r\n              }\r\n\r\n              switch (reponse.Code) {\r\n                case \"G001\":\r\n                  return toast.error(reponse.Message);\r\n                case \"U001\":\r\n                  return toast.error(reponse.Message);\r\n                case \"I001\":\r\n                  return toast.error(reponse.Message);\r\n                default: {\r\n                  navigate(\"/admin/itemCategoryList\");\r\n                  if (isEdit) {\r\n                    toast.success(\"Update Category Successed!\");\r\n                  } else {\r\n                    toast.success(\"Create Category Successed!\");\r\n                  }\r\n                }\r\n              }\r\n            } catch (err) {\r\n              setStatus({ success: false });\r\n              setErrors({ submit: err.message });\r\n            }\r\n          }}\r\n        >\r\n          {({\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleSubmit,\r\n            values,\r\n            setFieldValue,\r\n          }) => (\r\n            <form onSubmit={handleSubmit}>\r\n              <Card sx={{ padding: 8, gap: 2 }}>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      id=\"categoryName\"\r\n                      name=\"categoryName\"\r\n                      label=\"Category Name\"\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      value={values.categoryName}\r\n                      onChange={handleChange}\r\n                      error={Boolean(\r\n                        touched.categoryName && errors.categoryName\r\n                      )}\r\n                    />\r\n                    {touched.categoryName && errors.categoryName && (\r\n                      <FormHelperText\r\n                        error\r\n                        id=\"standard-weight-helper-text-CategoryName\"\r\n                      >\r\n                        {errors.categoryName}\r\n                      </FormHelperText>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      id=\"categoryDescription\"\r\n                      name=\"categoryDescription\"\r\n                      label=\"Category Description\"\r\n                      fullWidth\r\n                      autoComplete=\"\"\r\n                      variant=\"outlined\"\r\n                      value={values.categoryDescription}\r\n                      onChange={handleChange}\r\n                      error={Boolean(\r\n                        touched.categoryDescription &&\r\n                          errors.categoryDescription\r\n                      )}\r\n                    />\r\n                    {touched.categoryDescription &&\r\n                      errors.categoryDescription && (\r\n                        <FormHelperText\r\n                          error\r\n                          id=\"standard-weight-helper-CategoryDescription\"\r\n                        >\r\n                          {errors.categoryDescription}\r\n                        </FormHelperText>\r\n                      )}\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <Button variant=\"outlined\" onClick={gotoList}>\r\n                      Return to List\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} textAlign=\"right\">\r\n                    <Button type=\"submit\" variant=\"contained\">\r\n                      {isEdit ? \"Update\" : \"Create\"}\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Card>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n"],"names":["CategoryCreate","navigate","useNavigate","categoryId","useParams","isEdit","Boolean","_useState","useState","categoryName","categoryDescription","_useState2","_slicedToArray","category","setCategory","_useState3","userId","email","fullname","_useState4","setUser","gotoList","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","wrap","_context","prev","next","userApi","pageIndex","pageSize","userName","sent","listOfUser","abrupt","itemCategoryApi","t0","console","log","status","localStorage","removeItem","stop","validationSchema","yup","shape","required","_jsxs","_Fragment","children","_jsx","Typography","variant","gutterBottom","color","Container","Formik","initialValues","enableReinitialize","onSubmit","_ref3","_callee2","values","_ref2","setErrors","setStatus","reponse","_context2","success","Code","toast","Message","t1","submit","message","_x","_x2","apply","arguments","_ref4","errors","touched","handleChange","handleSubmit","setFieldValue","Card","sx","padding","gap","Grid","container","spacing","item","xs","sm","TextField","id","name","label","fullWidth","value","onChange","error","FormHelperText","autoComplete","Button","onClick","textAlign","type"],"sourceRoot":""}